#+title: Example Rational Emacs User Configuration File
#+PROPERTY: header-args:emacs-lisp :tangle ./config.el :mkdirp yes

Rational Emacs supports user customization through a =config.org= file similar to
this one.

To get you started, copy both example files to your Rational Emacs configuration
directory, e.g.:
- copy =examples/example-config.el= to =~/.rational-emacs/config.el=
- copy =examples/example-config.org= to =~/.rational-emacs/config.org=
- restart Emacs

After that, whenever you edit =config.org= in Emacs and save it, it updates
=config.el= in the same directory.

See the [[https://orgmode.org/manual/Extracting-Source-Code.html][Org Manual]] for details and alternatives.

#+begin_src emacs-lisp
  ;;; config.el -- Example Rational Emacs user customization file -*- lexical-binding: t; -*-
  ;; This file is generated from config.org. If you want to edit the
  ;; configuration, DO NOT edit config.el, edit config.org, instead.

  ;; Tangle the code blocks to config.el on save.
  (defun org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "config.org" rational-config-path))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook
            (lambda ()
              (add-hook 'after-save-hook #'org-babel-tangle-config)))
#+end_src

In your configuration you can set any Emacs configuration variable, face
attributes, themes, etc as you normally would.
See the README.org file in this repository for additional information.

* Crafted Modules

At the moment, Rational Emacs offers the following modules. Comment out
everything you don't want to use.
At the very least, you should decide whether or not you want to use [[https://github.com/emacs-evil/evil][evil-mode]],
as it will greatly change how you interact with Emacs. So, if you prefer
Vim-style keybindings over vanilla Emacs keybindings remove the comment
in the line about =rational-evil= below.
#+begin_src emacs-lisp
  (require 'rational-defaults)    ; Sensible default settings for Emacs
  (require 'rational-use-package) ; Configuration for `use-package`
  (require 'rational-updates)     ; Tools to upgrade Rational Emacs
  (require 'rational-completion)  ; selection framework based on `vertico`
  (require 'rational-ui)          ; Better UI experience (modeline etc.)
  (require 'rational-windows)     ; Window management configuration
  (require 'rational-editing)     ; Whitspace trimming, auto parens etc.
  ;(require 'rational-evil)        ; An `evil-mode` configuration
  (require 'rational-org)         ; org-appear, clickable hyperlinks etc.
  (require 'rational-project)     ; built-in alternative to projectile
  (require 'rational-speedbar)    ; built-in file-tree
  (require 'rational-screencast)  ; show current command and binding in modeline
  (require 'rational-compile)     ; automatically compile some emacs lisp files
#+end_src
* Font and theme settings
#+begin_src emacs-lisp
  (custom-set-variables
     '(rational-ui-default-font
       '(:font "JetBrains Mono" :weight light :height 185)))

  (rational-package-install-package 'doom-themes)
  (load-theme 'doom-wilmersdorf t)
#+end_src
* Splash screen
#+begin_src emacs-lisp
  (customize-set-variable 'rational-startup-inhibit-splash t)
#+end_src
* Doom Modeline
To make the information go somewhere visible

#+BEGIN_SRC emacs-lisp
 (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 35)
             (doom-modeline-bar-width 10)
             (doom-modeline-buffer-file-name-style 'auto)
             (doom-modeline-icon (display-graphic-p))
             (doom-modeline-major-mode-icon t)
             (doom-modeline-major-mode-color-icon t)
             (doom-modeline-enable-word-count t)
             (doom-modeline-modal-icon t)
             (doom-modeline-mu4e nil)
             (mu4e-alert-enable-mode-line-display)))

  (display-battery-mode 1)

  ;; Turn on `display-time-mode' if you don't use an external bar.
  (setq display-time-default-load-average nil)

  (display-time-mode t)

  (setq display-time-24hr-format 1)

  ;;(display-time-mode nil)
  ;;(setq display-time-24hr-format nil)
#+END_SRC

* Let's get encrypted
#+begin_src emacs-lisp
(setenv "GPG_AGENT_INFO" nil)  ;; use emacs pinentry
    (setq auth-source-debug t)

    (setq epg-gpg-program "gpg2")  ;; not necessary
    (require 'epa-file)
    (epa-file-enable)
;;(setq epa-pinentry-mode 'loopback)
(setq epg-pinentry-mode 'loopback)

    (require 'org-crypt)
    (org-crypt-use-before-save-magic)

(defun efs/lookup-password (&rest keys)
  (let ((result (apply #'auth-source-search keys)))
    (if result
	(funcall (plist-get (car result) :secret))
      nil)))
#+end_src
* Ivy,Swiper,Avy
#+BEGIN_SRC emacs-lisp
  (use-package counsel
      :ensure t)
  
    (use-package ivy
      :ensure t
      :diminish (ivy-mode)
      :bind (("C-x b" . ivy-switch-buffer))
      :config
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (setq ivy-display-style 'fancy)
      (setq enable-recursive-minibuffers t)
    )
      (use-package swiper
	:ensure try
	:bind (("C-s" . swiper)
	       ("C-r" . swiper)
	       ("C-c C-r" . ivy-resume)
	       ("M-x" . counsel-M-x)
	       ("C-x C-f" . counsel-find-file))
	:config
	(progn
	  (ivy-mode 1)
	  (setq ivy-use-virtual-buffers t)
	  (setq ivy-display-style 'fancy)
	  (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
	  ))

    (use-package avy
      :ensure t
      :bind ("M-s" . avy-goto-char))
#+END_SRC
* Org Mode

Org Mode is one of the hallmark features of Emacs. It is a rich document editor, project planner, task and time tracker, blogging engine, and literate coding utility all wrapped up in one package.
Better Font Faces

The efs/org-font-setup function configures various text faces to tweak the sizes of headings and use variable width fonts in most cases so that it looks more like we’re editing a document in org-mode. We switch back to fixed width (monospace) fonts for code blocks and tables so that they display correctly.

#+begin_src 
(defun efs/org-font-setup ()
  ;; Replace list hyphen with dot
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

  ;; Set faces for heading levels
  (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

  ;; Ensure that anything that should be fixed-pitch in Org files appears that way
  (set-face-attribute 'org-block nil    :foreground nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-table nil    :inherit 'fixed-pitch)
  (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil     :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-table nil    :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil  :inherit 'fixed-pitch)
  (set-face-attribute 'line-number nil :inherit 'fixed-pitch)
  (set-face-attribute 'line-number-current-line nil :inherit 'fixed-pitch))
#+end_src>

** Basic Config

This section contains the basic configuration for org-mode plus the configuration for Org agendas and capture templates. There’s a lot to unpack in here so I’d recommend watching the videos for Part 5 and Part 6 for a full explanation.

#+begin_src 
(defun efs/org-mode-setup ()
  (org-indent-mode)
  (variable-pitch-mode 1)
  (visual-line-mode 1))

(use-package org
  :pin org
  :commands (org-capture org-agenda)
  :hook (org-mode . efs/org-mode-setup)
  :config
  (setq org-ellipsis " ▾")

  (setq org-agenda-start-with-log-mode t)
  (setq org-log-done 'time)
  (setq org-log-into-drawer t)

  (setq org-agenda-files
        '("~/Projects/Code/emacs-from-scratch/OrgFiles/Tasks.org"
          "~/Projects/Code/emacs-from-scratch/OrgFiles/Habits.org"
          "~/Projects/Code/emacs-from-scratch/OrgFiles/Birthdays.org"))

  (require 'org-habit)
  (add-to-list 'org-modules 'org-habit)
  (setq org-habit-graph-column 60)

  (setq org-todo-keywords
    '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
      (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))

  (setq org-refile-targets
    '(("Archive.org" :maxlevel . 1)
      ("Tasks.org" :maxlevel . 1)))

  ;; Save Org buffers after refiling!
  (advice-add 'org-refile :after 'org-save-all-org-buffers)

  (setq org-tag-alist
    '((:startgroup)
       ; Put mutually exclusive tags here
       (:endgroup)
       ("@errand" . ?E)
       ("@home" . ?H)
       ("@work" . ?W)
       ("agenda" . ?a)
       ("planning" . ?p)
       ("publish" . ?P)
       ("batch" . ?b)
       ("note" . ?n)
       ("idea" . ?i)))

  ;; Configure custom agenda views
  (setq org-agenda-custom-commands
   '(("d" "Dashboard"
     ((agenda "" ((org-deadline-warning-days 7)))
      (todo "NEXT"
        ((org-agenda-overriding-header "Next Tasks")))
      (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

    ("n" "Next Tasks"
     ((todo "NEXT"
        ((org-agenda-overriding-header "Next Tasks")))))

    ("W" "Work Tasks" tags-todo "+work-email")

    ;; Low-effort next actions
    ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
     ((org-agenda-overriding-header "Low Effort Tasks")
      (org-agenda-max-todos 20)
      (org-agenda-files org-agenda-files)))

    ("w" "Workflow Status"
     ((todo "WAIT"
            ((org-agenda-overriding-header "Waiting on External")
             (org-agenda-files org-agenda-files)))
      (todo "REVIEW"
            ((org-agenda-overriding-header "In Review")
             (org-agenda-files org-agenda-files)))
      (todo "PLAN"
            ((org-agenda-overriding-header "In Planning")
             (org-agenda-todo-list-sublevels nil)
             (org-agenda-files org-agenda-files)))
      (todo "BACKLOG"
            ((org-agenda-overriding-header "Project Backlog")
             (org-agenda-todo-list-sublevels nil)
             (org-agenda-files org-agenda-files)))
      (todo "READY"
            ((org-agenda-overriding-header "Ready for Work")
             (org-agenda-files org-agenda-files)))
      (todo "ACTIVE"
            ((org-agenda-overriding-header "Active Projects")
             (org-agenda-files org-agenda-files)))
      (todo "COMPLETED"
            ((org-agenda-overriding-header "Completed Projects")
             (org-agenda-files org-agenda-files)))
      (todo "CANC"
            ((org-agenda-overriding-header "Cancelled Projects")
             (org-agenda-files org-agenda-files)))))))

  (setq org-capture-templates
    `(("t" "Tasks / Projects")
      ("tt" "Task" entry (file+olp "~/Projects/Code/emacs-from-scratch/OrgFiles/Tasks.org" "Inbox")
           "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)

      ("j" "Journal Entries")
      ("jj" "Journal" entry
           (file+olp+datetree "~/Projects/Code/emacs-from-scratch/OrgFiles/Journal.org")
           "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
           ;; ,(dw/read-file-as-string "~/Notes/Templates/Daily.org")
           :clock-in :clock-resume
           :empty-lines 1)
      ("jm" "Meeting" entry
           (file+olp+datetree "~/Projects/Code/emacs-from-scratch/OrgFiles/Journal.org")
           "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
           :clock-in :clock-resume
           :empty-lines 1)

      ("w" "Workflows")
      ("we" "Checking Email" entry (file+olp+datetree "~/Projects/Code/emacs-from-scratch/OrgFiles/Journal.org")
           "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)

      ("m" "Metrics Capture")
      ("mw" "Weight" table-line (file+headline "~/Projects/Code/emacs-from-scratch/OrgFiles/Metrics.org" "Weight")
       "| %U | %^{Weight} | %^{Notes} |" :kill-buffer t)))

  (define-key global-map (kbd "C-c j")
    (lambda () (interactive) (org-capture nil "jj")))

  (efs/org-font-setup))
#+end_src>

** Nicer Heading Bullets

org-bullets replaces the heading stars in org-mode buffers with nicer looking characters that you can control. Another option for this is org-superstar-mode which we may cover in a later video.

#+begin_src 
(use-package org-bullets
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src>

** Center Org Buffers

We use visual-fill-column to center org-mode buffers for a more pleasing writing experience as it centers the contents of the buffer horizontally to seem more like you are editing a document. This is really a matter of personal preference so you can remove the block below if you don’t like the behavior.

#+begin_src 
(defun efs/org-mode-visual-fill ()
  (setq visual-fill-column-width 100
        visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

(use-package visual-fill-column
  :hook (org-mode . efs/org-mode-visual-fill))
#+end_src>
* Mu4e email configuration
#+begin_src emacs-lisp
(use-package mu4e
  :ensure nil
  :config

  ;;this is set to 't' to avoid mail syncing issues when using mbsync
  (setq mu4e-change-filenames-when-moving t)

  ;; refresh mail using isync every 10 minutes
  (setq mu4e-update-interval (* 10 60))
  (setq mu4e-get-mail-command "mbsync -a")
  ;;(setq mu4e-maildir "~/Mail")

  ;; Configure the function to use for sending mail
(setq message-send-mail-function 'smtpmail-send-it)

  (setq mu4e-contexts
        (list
         ;; Work account
         (make-mu4e-context
          :name "Work"
          :match-func
            (lambda (msg)
              (when msg
                (string-prefix-p "/nepgroup" (mu4e-message-field msg :maildir))))
          :vars '((user-mail-address . "kkruse@nepgroup.com")
                  (user-full-name    . "Kim Kruse")
		  (smtpmail-smtp-server  . "smtp.office365.com")
                  (smtpmail-smtp-service . 587)
                  (smtpmail-stream-type  . ssl)
                  (mu4e-drafts-folder  . "/nepgroup/Drafts")
                  (mu4e-sent-folder  . "/nepgroup/Sendt Post")
                  (mu4e-refile-folder  . "/nepgroup/Indbakke")
                  (mu4e-trash-folder  . "/nepgroup/Slettet Post")))

	 ;; Hotmail account
;;         (make-mu4e-context
;;          :name "Hotmail"
;;          :match-func
;;            (lambda (msg)
;;              (when msg
;;                (string-prefix-p "/Hotmail" (mu4e-message-field msg :maildir))))
;;          :vars '((user-mail-address . "kimkruse@hotmail.com")
;;                  (user-full-name    . "Kim Kruse")
;;		  (smtpmail-smtp-server  . "smtp-mail.outlook.com")
;;                  (smtpmail-smtp-service . 58;;7)
;;                  (smtpmail-stream-type  . st;;arttls)
;;                  (mu4e-drafts-folder  . "/Ho;;tmail/Drafts")
;;                  (mu4e-sent-folder  . "/Hotm;;ail/Sent Mail")
;;                  (mu4e-refile-folder  . "/Ho;;tmail/Alle mails")
;;                  (mu4e-trash-folder  . "/Hot;;mail/Trash")))

         ;; Personal account
         (make-mu4e-context
          :name "Personal"
          :match-func
            (lambda (msg)
              (when msg
                (string-prefix-p "/kimkruse" (mu4e-message-field msg :maildir))))
          :vars '((user-mail-address . "kim@kimkruse.xyz")
                  (user-full-name    . "Kim Kruse")
		  (smtpmail-smtp-server . "mail.kimkruse.xyz")
		  (smtpmail-smtp-service . 587)
		  (smtpmail-stream-type . starttls)
                  (mu4e-drafts-folder  . "/kimkruse/Drafts")
                  (mu4e-sent-folder  . "/kimkruse/Sent")
                  (mu4e-refile-folder  . "/kimkruse/Archive")
                  (mu4e-trash-folder  . "/kimkruse/Trash")))))

  (setq mu4e-maildir-shortcuts
      '(("/kimkruse/Inbox"             . ?i)
        ("/kimkruse/Sent" . ?s)
        ("/nepgroup/INBOX"    . ?d)
        ("/nepgroup/'Sendt Post'"     . ?t))))
#+end_src
* Custom.el
By default, Rational Emacs keeps your config file clean. All the customization
settings that Emacs normally automatically adds to your config.el go into
the file =custom.el= instead. If you don't want this, set the respective
variable to =nil=:
#+begin_src emacs-lisp
  ;; To not load `custom.el' after `config.el', uncomment this line.
  ;; (setq rational-load-custom-file nil)
#+end_src

* Tangling to early-config.el
If you need to make settings to =early-config.el=, you can do that from here, too.
Just begin the source code block with:
#+begin_src org
  ,#+begin_src emacs-lisp :tangle ./early-config.el
#+end_src
