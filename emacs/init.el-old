;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Font
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;; init.el -*- lexical-binding: t; -*-
(set-face-attribute 'default nil
                    :family "Fira Code"
                    :height 160
                    :weight 'normal
                    :width 'normal)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Package Setup
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Initialize package sources
(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))

  ;; Initialize use-package on non-Linux platforms
(unless (package-installed-p 'use-package)
  (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)

(use-package auto-package-update
  :custom
  (auto-package-update-interval 7)
  (auto-package-update-prompt-before-update t)
  (auto-package-update-hide-results t)
  :config
  (auto-package-update-maybe)
  (auto-package-update-at-time "09:00"))

;; Profile emacs startup
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "Kims Emacs loaded in %s."
                     (emacs-init-time))))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Org Babel Support
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (python . t)))

(setq org-confirm-babel-evaluate nil)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Doom Theme
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (use-package doom-themes
    :ensure t
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-nova t)1)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Doom Modeline
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1)
  :custom ((doom-modeline-height 35)
	   (doom-modeline-bar-width 10)
	   (doom-modeline-buffer-file-name-style 'auto)
	   (doom-modeline-icon (display-graphic-p))
	   (doom-modeline-major-mode-icon t)
	   (doom-modeline-major-mode-color-icon t)
	   (doom-modeline-enable-word-count t)
	   (doom-modeline-modal-icon t)
	   (doom-modeline-mu4e nil)
	   (mu4e-alert-enable-mode-line-display)))

(display-battery-mode 1)

;; Turn on `display-time-mode' if you don't use an external bar.
(setq display-time-default-load-average nil)

(display-time-mode t)

(setq display-time-24hr-format 1)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Dired
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(use-package dired
  :ensure nil
  :commands (dired dired-jump)
  :bind (("C-x C-j" . dired-jump))
  :custom ((dired-listing-switches "-agho --group-directories-first")))
(use-package dired-single)

(use-package all-the-icons-dired
  :hook (dired-mode . all-the-icons-dired-mode))

(use-package dired-open
  :config
  ;; Doesn't work as expected!
  ;;(add-to-list 'dired-open-functions #'dired-open-xdg t)
  (setq dired-open-extensions '(("png" . "feh")
                                ("mkv" . "mpv")
				("mp3" . "mplayer"))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Eshell
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;(defun efs/configure-eshell ()
;;  ;; Save command history when commands are entered
;;  (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)
;;
;;  ;; Truncate buffer for performance
;;  (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)
;;
;; 
;;  (setq eshell-history-size         10000
;;        eshell-buffer-maximum-lines 10000
;;      eshell-hist-ignoredups t
;;     eshell-scroll-to-bottom-on-input t))
;;
;; (use-package eshell-git-prompt)
;;
;; (use-package eshell
;;   :hook (eshell-first-time-mode . efs/configure-eshell)
;;   :config
;;
;;  (with-eval-after-load 'esh-opt
;;    (setq eshell-destroy-buffer-when-process-dies t)
;;    (setq eshell-visual-commands '("htop" "zsh" "vim")))
;;
;;  (eshell-git-prompt-use-theme 'powerline))
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Org-Mode
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(defun efs/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1))

    (setq org-ellipsis " ▾")

  (use-package org-bullets
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

  (defun efs/org-mode-visual-fill ()
    (setq visual-fill-column-width 80
	  visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . efs/org-mode-visual-fill))

   (setq org-latex-pdf-process
	    '("latexmk -pdflatex='pdflatex -interaction nonstopmode' -pdf -bibtex -f %f"))

  (require 'org-tempo)


  (unless (boundp 'org-latex-classes)
    (setq org-latex-classes nil))

      (add-to-list 'org-latex-classes
		   '("ethz"
		     "\\documentclass[a4paper,11pt,titlepage]{memoir}
      \\usepackage[utf8]{inputenc}
      \\usepackage[T1]{fontenc}
      \\usepackage{fixltx2e}
      \\usepackage{graphicx}
      \\usepackage{longtable}
      \\usepackage{float}
      \\usepackage{wrapfig}
      \\usepackage{rotating}
      \\usepackage[normalem]{ulem}
      \\usepackage{amsmath}
      \\usepackage{textcomp}
      \\usepackage{marvosym}
      \\usepackage{wasysym}
      \\usepackage{amssymb}
      \\usepackage{hyperref}
      \\usepackage{mathpazo}
      \\usepackage{color}
      \\usepackage{enumerate}
      \\definecolor{bg}{rgb}{0.95,0.95,0.95}
      \\tolerance=1000
	    [NO-DEFAULT-PACKAGES]
	    [PACKAGES]
	    [EXTRA]
      \\linespread{1.1}
      \\hypersetup{pdfborder=0 0 0}"
		     ("\\chapter{%s}" . "\\chapter*{%s}")
		     ("\\section{%s}" . "\\section*{%s}")
		     ("\\subsection{%s}" . "\\subsection*{%s}")
		     ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
		     ("\\paragraph{%s}" . "\\paragraph*{%s}")
		     ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))


      (add-to-list 'org-latex-classes
		   '("article"
		     "\\documentclass[11pt,a4paper]{article}
      \\usepackage[utf8]{inputenc}
      \\usepackage[T1]{fontenc}
      \\usepackage{fixltx2e}
      \\usepackage{graphicx}
      \\usepackage{longtable}
      \\usepackage{float}
      \\usepackage{wrapfig}
      \\usepackage{rotating}
      \\usepackage[normalem]{ulem}
      \\usepackage{amsmath}
      \\usepackage{textcomp}
      \\usepackage{marvosym}
      \\usepackage{wasysym}
      \\usepackage{amssymb}
      \\usepackage{hyperref}
      \\usepackage{mathpazo}
      \\usepackage{color}
      \\usepackage{enumerate}
      \\definecolor{bg}{rgb}{0.95,0.95,0.95}
      \\tolerance=1000
	    [NO-DEFAULT-PACKAGES]
	    [PACKAGES]
	    [EXTRA]
      \\linespread{1.1}
      \\hypersetup{pdfborder=0 0 0}"
		     ("\\section{%s}" . "\\section*{%s}")
		     ("\\subsection{%s}" . "\\subsection*{%s}")
		     ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
		     ("\\paragraph{%s}" . "\\paragraph*{%s}")))


      (add-to-list 'org-latex-classes '("ebook"
					"\\documentclass[11pt, oneside]{memoir}
      \\setstocksize{9in}{6in}
      \\settrimmedsize{\\stockheight}{\\stockwidth}{*}
      \\setlrmarginsandblock{2cm}{2cm}{*} % Left and right margin
      \\setulmarginsandblock{2cm}{2cm}{*} % Upper and lower margin
      \\checkandfixthelayout
      % Much more laTeX code omitted
      "
					("\\chapter{%s}" . "\\chapter*{%s}")
					("\\section{%s}" . "\\section*{%s}")
					("\\subsection{%s}" .
  "\\subsection*{%s}")))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Counsel & Ivy
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(use-package counsel
    :ensure t)
  
  (use-package ivy
    :ensure t
    :diminish (ivy-mode)
    :bind (("C-x b" . ivy-switch-buffer))
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-display-style 'fancy)
    (setq enable-recursive-minibuffers t)
  )
    (use-package swiper
      :ensure try
      :bind (("C-s" . swiper)
	     ("C-r" . swiper)
	     ("C-c C-r" . ivy-resume)
	     ("M-x" . counsel-M-x)
	     ("C-x C-f" . counsel-find-file))
      :config
      (progn
	(ivy-mode 1)
	(setq ivy-use-virtual-buffers t)
	(setq ivy-display-style 'fancy)
	(define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
	))

  (use-package avy
    :ensure t
    :bind ("M-s" . avy-goto-char))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Let's get encrypted!
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(setenv "GPG_AGENT_INFO" nil)  ;; use emacs pinentry
    (setq auth-source-debug t)

    (setq epg-gpg-program "gpg2")  ;; not necessary
    (require 'epa-file)
    (epa-file-enable)
(setq epa-pinentry-mode 'loopback)
(setq epg-pinentry-mode 'loopback)

    (require 'org-crypt)
    (org-crypt-use-before-save-magic)

(defun efs/lookup-password (&rest keys)
  (let ((result (apply #'auth-source-search keys)))
    (if result
	(funcall (plist-get (car result) :secret))
      nil)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Autocomplete
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(use-package auto-complete
  :ensure t
  :init
  (progn
    (ac-config-default)
    (global-auto-complete-mode t)
    ))
(setq ido-enable-flex-matching t)
(setq ido-everywhere t)
(ido-mode 1)

(defalias 'list-buffers 'ibuffer)

(defalias 'list-buffers 'ibuffer-other-window)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Music player config
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; EMMS basic configuration
  (require 'emms-setup)
  (emms-all)
  (emms-default-players)
  (setq emms-source-file-default-directory "~/Musik/") ;; Change to your music folder

(setq emms-info-functions '(emms-info-exiftool))
;; Load cover images
(setq emms-browser-covers 'emms-browser-cache-thumbnail-async)

(emms-player-mpd-connect)
(emms-cache-set-from-mpd-all)

 ;; Helm EMMS
  (use-package helm-emms
    :bind
    (("<C-f5>" . helm-emms)))

(require 'emms-lyrics)
(emms-lyrics 1)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Symon a bottom bar
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(require 'symon)
(symon-mode)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;Mail configuration
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(server-start)

(use-package mu4e
  :ensure nil
  :config

  ;;this is set to 't' to avoid mail syncing issues when using mbsync
  (setq mu4e-change-filenames-when-moving t)

  ;; refresh mail using isync every 10 minutes
  (setq mu4e-update-interval (* 10 60))
  (setq mu4e-get-mail-command "mbsync -a")
  (setq mu4e-maildir "~/Mail")

  ;; Configure the function to use for sending mail
(setq message-send-mail-function 'smtpmail-send-it)

  (setq mu4e-contexts
        (list
         ;; Work account
         (make-mu4e-context
          :name "Work"
          :match-func
            (lambda (msg)
              (when msg
                (string-prefix-p "/nepgroup" (mu4e-message-field msg :maildir))))
          :vars '((user-mail-address . "kkruse@nepgroup.com")
                  (user-full-name    . "Kim Kruse")
		  (smtpmail-smtp-server  . "smtp.office365.com")
                  (smtpmail-smtp-service . 587)
                  (smtpmail-stream-type  . ssl)
                  (mu4e-drafts-folder  . "/nepgroup/Drafts")
                  (mu4e-sent-folder  . "/nepgroup/Sendt Post")
                  (mu4e-refile-folder  . "/nepgroup/Indbakke")
                  (mu4e-trash-folder  . "/nepgroup/Slettet Post")))

	 ;; Hotmail account
;;         (make-mu4e-context
;;          :name "Hotmail"
;;          :match-func
;;            (lambda (msg)
;;              (when msg
;;                (string-prefix-p "/Hotmail" (mu4e-message-field msg :maildir))))
;;          :vars '((user-mail-address . "kimkruse@hotmail.com")
;;                  (user-full-name    . "Kim Kruse")
;;		  (smtpmail-smtp-server  . "smtp-mail.outlook.com")
;;                  (smtpmail-smtp-service . 58;;7)
;;                  (smtpmail-stream-type  . st;;arttls)
;;                  (mu4e-drafts-folder  . "/Ho;;tmail/Drafts")
;;                  (mu4e-sent-folder  . "/Hotm;;ail/Sent Mail")
;;                  (mu4e-refile-folder  . "/Ho;;tmail/Alle mails")
;;                  (mu4e-trash-folder  . "/Hot;;mail/Trash")))

         ;; Personal account
         (make-mu4e-context
          :name "Personal"
          :match-func
            (lambda (msg)
              (when msg
                (string-prefix-p "/kimkruse" (mu4e-message-field msg :maildir))))
          :vars '((user-mail-address . "kim@kimkruse.xyz")
                  (user-full-name    . "Kim Kruse")
		  (smtpmail-smtp-server . "mail.kimkruse.xyz")
		  (smtpmail-smtp-service . 587)
		  (smtpmail-stream-type . starttls)
                  (mu4e-drafts-folder  . "/kimkruse/Drafts")
                  (mu4e-sent-folder  . "/kimkruse/Sent")
                  (mu4e-refile-folder  . "/kimkruse/Archive")
                  (mu4e-trash-folder  . "/kimkruse/Trash")))))

  (setq mu4e-maildir-shortcuts
      '(("/kimkruse/Inbox"             . ?i)
        ("/kimkruse/Sent" . ?s)
        ("/nepgroup/INBOX"    . ?d)
        ("/nepgroup/'Sendt Post'"     . ?t))))
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(initial-major-mode 'fundamental-mode)
 '(load-prefer-newer nil)
 '(package-archive-priorities
   '(("gnu" . 99)
     ("nongnu" . 80)
     ("stable" . 70)
     ("melpa" . 0)))
 '(package-selected-packages
   '(emms-player-simple-mpv symon simple-mpc eshell visual-fill-column use-package try org-bullets multi-vterm ivy-emms exwm eshell-git-prompt emms-soundcloud emms-info-mediainfo doom-themes doom-modeline dired-single dired-open counsel avy auto-complete all-the-icons-dired))
 '(package-user-dir "/home/kim/.crafted-emacs/elpa/"))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
